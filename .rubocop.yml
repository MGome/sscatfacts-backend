# Two ways of disable a rule

# By block
# rubocop:disable RuleByName, AnotherRuleByName
# This is a long line
# rubocop:enable RuleByName, AnotherRuleByName

# By adding at the end of the line
# rubocop:disable Metrics/BlockLength, Style/AsciiComments

require:
  - rubocop-rspec
  - rubocop-rails

AllCops:
  Exclude:
    - 'db/**/*'
    - 'node_modules/**/*'
    - 'config/**/*'
    - 'script/**/*'
    - 'bin/*'
    - 'lib/generators/**/*'
    - '**/*.html.erb'
    - '**/*.erb'
    - 'Rakefile'
    - 'config.ru'

Layout/ClassStructure:
  Enabled: true
  Categories:
    module_inclusion:
      - include
      - prepend
      - extend
    attributes:
      - attribute
      - attr_reader
      - attr_writer
      - attr_accessor
    associations:
      - has_one_attached
      - has_one
      - belongs_to
      - has_many
      - has_and_belongs_to_many
    validations:
      - validates_presence_of
      - validates_uniqueness_of
      - validates
      - validate
    hooks:
      - before_create
      - before_update
      - before_save
      - before_destroy
      - after_save
      - after_create
      - after_initialize
  ExpectedOrder:
    - module_inclusion
    - constants
    - attributes
    - enum
    - associations
    - accepts_nested_attributes_for
    - validations
    - hooks
    - scope
    - public_class_methods
    - initializer
    - public_methods
    - protected_methods
    - private_methods

# Allow methods with unlimited number of parameters
Metrics/ParameterLists:
  Enabled: false

# Too short methods lead to extraction of single-use methods, which can make
# the code easier to read (by naming things), but can also clutter the class
Metrics/MethodLength:
  Max: 20

# The guiding principle of classes is SRP, SRP can't be accurately measured by LoC
Metrics/ClassLength:
  Max: 1500

Metrics/AbcSize:
  Max: 30

Metrics/PerceivedComplexity:
  Max: 11

Metrics/CyclomaticComplexity:
  Max: 11

# Commonly used screens these days easily fit more than 80 characters.
Layout/LineLength:
  Max: 140

# No space makes the method definition shorter and differentiates
# from a regular assignment.
Layout/SpaceAroundEqualsInParameterDefault:
  EnforcedStyle: no_space

# Most readable form.
Layout/HashAlignment:
  EnforcedHashRocketStyle: table
  EnforcedColonStyle: table

# We do not need to support Ruby 1.9, so this is good to use.
Style/SymbolArray:
  Enabled: true

# Allow ascii comments, to write in spanish
Style/AsciiComments:
  Enabled: false

Style/EmptyMethod:
  EnforcedStyle: expanded

# Mixing the styles looks just silly.
Style/HashSyntax:
  EnforcedStyle: ruby19_no_mixed_keys

# has_key? and has_value? are far more readable than key? and value?
Style/PreferredHashMethods:
  Enabled: false

# String#% is by far the least verbose and only object oriented variant.
Style/FormatString:
  EnforcedStyle: percent

Style/RaiseArgs:
  EnforcedStyle: compact

Style/CollectionMethods:
  Enabled: true
  PreferredMethods:
    # inject seems more common in the community.
    reduce: "inject"

# Fail is an alias of raise. Avoid aliases, it's more cognitive load for no gain.
# The argument that fail should be used to abort the program is wrong too,
# there's Kernel#abort for that.
Style/SignalException:
  EnforcedStyle: only_raise

# { ... } for multi-line blocks is okay, follow Weirichs rule instead:
# https://web.archive.org/web/20140221124509/http://onestepback.org/index.cgi/Tech/Ruby/BraceVsDoEnd.rdoc
Style/BlockDelimiters:
  Enabled: false

# do / end blocks should be used for side effects,
# methods that run a block for side effects and have
# a useful return value are rare, assign the return
# value to a local variable for those cases.
Style/MethodCalledOnDoEndBlock:
  Enabled: true

# Check with yard instead.
Style/Documentation:
  Enabled: false

Naming/PredicateName:
  Enabled: false

# This is just silly. Calling the argument `other` in all cases makes no sense.
Naming/BinaryOperatorParameterName:
  Enabled: false

# Suppressing exceptions can be perfectly fine, and be it to avoid to
# explicitly type nil into the rescue since that's what you want to return,
# or suppressing LoadError for optional dependencies
Lint/SuppressedException:
  Enabled: false

# Shadowing outer local variables with block parameters is often useful
# to not reinvent a new name for the same thing, it highlights the relation
# between the outer variable and the parameter. The cases where it's actually
# confusing are rare, and usually bad for other reasons already, for example
# because the method is too long.
Lint/ShadowingOuterLocalVariable:
  Enabled: false

RSpec/ImplicitExpect:
  EnforcedStyle: should

RSpec/DescribedClass:
  EnforcedStyle: explicit

RSpec/ExampleWording:
  Enabled: false

RSpec/MultipleExpectations:
  Max: 3

RSpec/NestedGroups:
  Max: 4

# These lints by default are false, but are necessary in order for rubocop to work with vsc
Lint/RaiseException:
  Enabled: false
Lint/StructNewOverride:
  Enabled: false
Style/HashEachMethods:
  Enabled: false
Style/HashTransformKeys:
  Enabled: false
Style/HashTransformValues:
  Enabled: false

# New configuration, manually added
Style/FrozenStringLiteralComment:
  Enabled: false

Style/ClassAndModuleChildren:
  Enabled: false
